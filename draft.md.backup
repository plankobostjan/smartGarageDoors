# Pametna garažna vrata

## Uvod
### Opis problema

Problem današnjih garažnih vrat je, da jih je običajni možno odpreti samo na dva načina. S priloženim daljincem ali s tipko, običajno nameščeno na notranji strani garažnih vrat. Če želimo torej garana vrata odpretni moramo bitjt ali v garaži ali pa moramo imeti pri sebi daljinec. To pa je v vsakdanjem življenju nepraktično, sploh v primeru, ko pri hiši živi veliko ljudi, vsi pa rabijo dostop do garaže.

V tej nalogi bom predstavil svojo idejo, pametna garažna vrata, kot sem si jih zamislil in poskušal realizirati.

### Cilji
Za raziskovalno nalogo, sem si postavil naslednje cilje:
  - Garažna vrata bo možno upravljati preko telefona
  - Garažna vrata bo možno upravljati preko spletne strani
  - Raspberry Pi bo spremljal ali je avto v garaži ali ne in glede na to samodejno zapiral garažna vrata
  - Raspberry Pi bo spremljal temperaturo v garaži in jih samodejno zaprl v primeru prenizke ali previsoke temperature
  - Raspberry Pi bo samodejno zaprl garažna vrata, če ostanejo odprta po določeni uri
  - Raspberry Pi nas bo preko potisnih obvestil obveščal o spremembi stanja garažnih vrat
  - Raspberry Pi bo beležil kdo in kdaj je aktiviral garažna vrata
  
## Izbira komponent
  Ker ne potrebujem veliko precesorske moči, hkrati pa želim, da je moj projekt kar se da kompakten kot krmilnik izberem Raspberry Pi Zero W. To je najmanjša verzija Raspberry Pi-ja, z že vgrajenim WiFi-jem in Bluetoothom. Slednja bosta pri projektu najverjetneje potrebna.
  
  Za upravljanje garažnih vrat bom uporabil 1-kanalni rele. Le tega bom sprogramiral tako, da se bo obnašal kot tipka tj. zaprl se bo za kratek časovni interval prib. 0.5s, nato pa se znova odprl. Nameščen bo v bližini že obstoječe tipke, ki se uporablja za upravljanje garažnih vrat. Z le to bo vzporedno vezan.
  
  Za spremljanje stanja garažnih vrat bom uporabil reed stikala. In sicer dve stikali ter in magnet. Stikali bosta nameščeni na ogrodje vrat, medtem ko bo magnet nameščen neposredno na garažna vrata.
  
  Za spremljanje temperature v garaži uporabim 1-Wire digitalni element.... (nevem imena zle). Le ta bo nameščen nekje v garaži, po možnosti meter od tal, na najmanj prepišnem mestu v garaži.
  
  Ultrazvočni senzor, s katerim bom preverjal ali je avto v garaži ali ne, bo nameščen ali na stropbu garaže, najverjetneje pa kar na motorju garažnih vrat.
  
  Ker želim, da bo mogoče v garaži preveriti ternutno temperaturo ter čas, bom uporabil tudi 16x2 LCD zaslon.
  
  Poleg že naštetih komponent bo uporabil še dve LED diodi in dve tipki. Le te bodo paroma uporabljene kot indikator stanja avta oziroma temperature v garaži. Če bo naprimer garaža odprta in bo vanjo pripeljal avto, se bo pognal program, ki bo po določenem času samodejno zaprl vrata. Istočasno, bo začela utripati ustrezna LED dioda, uporabnik pa bo imel s pritiskom tipke možnost da prekliče samodejno zapiranje garaže. Pri temperaturi je namen LED diode in tipke enak, le da spremljamo temperaturo v garaži.
  
  > vstavi sliko komponent
  
 ## Priprava Raspberry Pi-ja
 Da bom lahko uporabljal Raspberry Pi, moram najprej naložiti usterzen opreacijski sistem na Raspberry Pi. Ker za svoj projekt ne potrebujem grafičnega vmesnika, na Raspberry Pi namestim Raspbian Lite. To storim tako, da iz [uradne strani](https://www.raspberrypi.org/downloads/raspbian/) Raspberry Pi prenesem Raspbian Stretch Lite. Nato sledim [navodilom](https://www.raspberrypi.org/documentation/installation/installing-images/README.md) za namestitev operacijskega sistema na microSd kartico, ki jo nato vstavim v Raspberry Pi.
 
Ker do Raspberry Pi-ja že od samega začetka nimam dostopa preko tipkovnice, moram pred zagonom omogočiti še SSH ter vnesti podatke, ki jih Raspberry Pi potrebuje za povezavo na WiFi dostopno točko. Da omogočim SSH, na boot particijo microSD katrice dodam datoteko ssh. Da pa se bo Raspberry Pi lahko povezal na WiFi dostopno točko, moram na boot particiji ustvariti datoteko wpa_supplicant.conf, v katero vnesem naslednje:
```bash
country=SI
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
	ssid="imeDostopneTpočke"
	psk="geslo"
	key_mgmt=WPA-PSK
}
```

Nato microSD kartico vstavim v Raspberry Pi in priključim napajanje.

Nato se iz terminala na svojem računalniku preko SSH povežem na Raspberry Pi:

```bash
ssh pi@IP_RaspberryPi #uporabnik pi, privzeto geslo pa je raspberry
```

Ko je povezava vzpostavljena uporabim ukaz *passwd pi*, da spremenim geslo uporabnika pi.

Nato zaženem ukaz *sudo raspi-config*
> - dodaj screenshot raspi-config
> - poglej kaj vse si nastavil
> - razloži kaj in zakaj si nastavil

Preden namestim kakršnekoli nove pakete, je potrebno sistem posodobiti:

```bash
sudo apt update && sudo apt upgrade -y
```

Ker bom program za upravljanje garažnih vrat napisal v Pythonu, le tega namestim na Raspberry Pi:

```bahs
sudo apt install python python-pip
```

## Priključitev komponent
### Rele
### Reed stikali
### Ultrazvočni senzor razdalje
### DS1822 temperaturni senzor
### LCD zaslon
### Tipki in LED diodi
>poglej doma kako so priključene komponente

## Programske rešitve

### Preizkus releja
Da lahko preverim ali rele pravilno deluje, napišem enostaven program, ki zapre rele in ga čez 0.5 sekunde odpre.

```python
#!/usr/bin/python

#nadomestil toggleGarage.sh

import RPi.GPIO as GPIO #import the GPIO library
import time

GPIO.setmode(GPIO.BOARD) #nastavi način številčenja GPIO pinov
GPIO.setup(12, GPIO.OUT) #nastavi pin 12 kot izhodnega
GPIO.output(12, 0) #zapre rele
time.sleep(.5) #počaka 0.5 sekunde
GPIO.output(12, 1) #odpre rele

GPIO.cleanup() #počisti GPIO nastavitve
```
Program sem nato pognal preko SSH:
```bash
./toggleGarage.py
```

### Preverjanje stanja garaže

Da lahko preverjam ali so garažna vrata odprta, priprta oziroma zaprta, moram dobiti trenutno stanje reed stikal. Tudi za to napišem program v Pythonu.
>preveri, če program pravilno deluje (pin FALSE??)

```python
#!/usr/bin/python

import RPi.GPIO as GPIO #import the GPIO library
import time

GPIO.setmode(GPIO.BCM) #nastavi način števičenja GPIO pinov
GPIO.setup(5, GPIO.IN, pull_up_down=GPIO.PUD_UP) #nastavi pin 5 kot vhodni pin in omogoči notranji pull down
GPIO.setup(6, GPIO.IN, pull_up_down=GPIO.PUD_UP) #nastavi pin 6 kot vhodni pin in omogoči notranji pull down

if GPIO.input(5) == False:
    print("Door is open") # če je pin 5
elif GPIO.input(g) == False:
    print("Door is closed")
else:
    print("Door is ajar")
```

### Spremljanje temperature
>TODO prilagodi program za spremljanje rempreature tako, da bo, če je pognan brez parametrov v neksončni zanki na LCD izpisoval ternutni čas in temperaturo. V primeru da je pognan z argumentom (-o) se požene, vrne temperaturo in zaključi.

